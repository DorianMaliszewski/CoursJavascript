---
import Link from "components/Link.tsx";
import MenuIcon from "components/MenuIcon.astro";
import { getCollection } from "astro:content";
import RecursiveTree from "./RecursiveTree.tsx";
import { bigint } from "astro:schema";
import { LucideSearch } from "lucide-react";

export const prefetch = false

const currentPath = Astro.url.pathname.replace(/^\/+/, "").replace(/\/$/, "");


const allBlogPosts = await getCollection("pages");

function createSidebar(sub: typeof allBlogPosts, subDir: string | null) {
  const final = [];
  let ids = [
    ...new Set(
      sub.map(
        (post) =>
          post.filePath
            .replace("src/pages/", "")
            .replace(subDir + "/", "")
            .split("/")[0]
      )
    ),
  ];
  ids = ids.toSorted((a, b) => 
  a.toLowerCase().includes("extra") ? 1 : b.toLowerCase().includes("extra") ? -1 : a.localeCompare(b, "fr", { numeric: true })
);

  ids.forEach((id) => {
    const customsuffixe = subDir ? `${subDir}/${id}` : id;
    const childrens = sub.filter((p) => p.id.startsWith(customsuffixe));
    const tr = sub.find((s) => s.filePath === "src/pages/" + customsuffixe);
    if (!tr?.data.hidden)
    final.push({
      title: tr?.data.title ?? id,
      path: customsuffixe,
      type: tr?.data.type ?? undefined,
      items: createSidebar(childrens, customsuffixe),
    });
  });

  return final;
}

const sidebarData = createSidebar(allBlogPosts, null);

---
<script is:inline>
  function handleClick() {
    document.getElementById("sidebar").classList.toggle("-translate-x-full");
  }

  document.addEventListener("DOMContentLoaded", () => {
    const detailsElements = document.querySelectorAll("details");
    const localStorageKey = "openDetails";

    const getInitialState = () => {
      const storedState = localStorage.getItem(localStorageKey);
      return storedState ? JSON.parse(storedState) : {};
    };

    const initialState = getInitialState();
    detailsElements.forEach((details) => {
      details.open = !!initialState[details.id] ?? false;

      details.addEventListener("toggle", () => {
        const state = {};
        detailsElements.forEach((el) => {
          if (el.id) {
            state[el.id] = el.open;
          }
        });
        localStorage.setItem(localStorageKey, JSON.stringify(state));
      });
    });
  });
</script>

<div
  style="background: linear-gradient( to bottom,var(--fallback-b1, oklch(var(--b1) / 1)) 0%,var(--fallback-b1, oklch(var(--b1) / 1)) 60%,transparent 100%);"
  class="fixed top-0 left-0 w-100 border-solid w-full pb-10 z-1000"
>
  <button
    onclick="handleClick()"
    aria-controls="sidebar"
    type="button"
    class="inline-flex items-center p-2 mt-4 ms-3 text-sm text-gray-500 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
  >
    <span class="sr-only">Open sidebar</span>
    <MenuIcon isOpen={false} />
  </button>
</div>

<aside
  id="sidebar"
  class="fixed top-0 left-0 z-40 w-96 h-screen transition-transform -translate-x-full"
  aria-label="Sidebar"
>
  <div class="h-full px-3 py-4 overflow-y-auto bg-gray-50 dark:bg-gray-800">
    <div class="flex gap-5 items-center mb-5">
      <button
        type="button"
        onclick="handleClick()"
        aria-controls="sidebar"
        class="inline-flex items-center p-2 text-sm text-gray-500 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
      >
        <span class="sr-only">Close sidebar</span>
        <MenuIcon isOpen={true} />
      </button>
      <Link href="/" className="flex items-center">
        <span
          class="self-center text-xl font-semibold whitespace-nowrap dark:text-white"
          >MMI Cours</span
        >
      </Link>
    </div>
    
    <RecursiveTree data={sidebarData} currentPath={currentPath} client:load />
    <ul class="space-y-2 font-medium menu">
      <li>
    <Link type="QI" href={"/oral"}>
          Quizz
        </Link>
      </li>
    </ul>
  </div>
</aside>
