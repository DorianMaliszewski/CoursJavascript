---
import Layout from "layouts/Layout.astro";
import OpenAI from 'openai';
import { z } from 'zod';
import { zodResponseFormat } from 'openai/helpers/zod';


console.error("coucou"); 
const openai = new OpenAI({
  apiKey: import.meta.env.AI_API_KEY,
  baseURL: import.meta.env.AI_API_URL,
});

// Définition du schéma Zod pour la validation du quiz
const quizSchema = z.object({
  mode: z.literal('exam'),
  questionsPerTest: z.literal(20),
  questions: z.array(
    z.object({
      question: z.string(),
      answers: z.array(z.string()).length(4),
      correctAnswerIndex: z.number().min(0).max(3),
    })
  ).length(20),
});

let quizData = null;
let errorMessage = '';

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const codeSnippet = data.get("codeSnippet");


    console.error("Json envoyer : " + codeSnippet);
    if (!codeSnippet || typeof codeSnippet !== "string") {
      errorMessage = "Code invalide ou manquant.";
    } else {
      // Envoi à OpenAI
      const response = await openai.beta.chat.completions.parse({
        model: 'llama-3.1-8b-instruct',
        messages: [
          {
            role: "system",
            content: "Tu es un générateur de quiz pour des étudiants.",
          },
          {
            role: "user",
            content: `Voici un extrait de code:\n\n${codeSnippet}\n\n 
            Génère un quiz de 20 questions en respectant ce format JSON:
          {
            "mode": "train",
            "questionsPerTest": 20,
            "questions": [
              {"question": "Quelle est la lettre qui précede la lettre A ?", "answers": ["A", "B", "C", "D"], "correctAnswerIndex": 1},
              ...
            ]
          },
            
            `,
          },
        ],
        response_format: zodResponseFormat(quizSchema, "quizSchema"),
      });

      // Validation de la réponse
      quizData = response.choices?.[0]?.message?.parsed || null;
      if (!quizData) {
        errorMessage = "Erreur : Aucune donnée valide reçue de OpenAI.";
      }
    }
  } catch (error) {
    errorMessage = `Erreur API: ${error instanceof Error ? error.message : "Erreur inconnue"}`;
  }
}
---

<Layout title="Générer votre quiz personnalisé !">
  <div class="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-100">
    
    <h1 class="text-3xl font-bold mb-4">Générer un Quiz</h1>
    
    <form method="POST" class="w-full max-w-lg bg-white p-6 rounded-lg shadow-md">
      <label for="codeSnippet" class="block text-gray-700 font-medium mb-2">Collez votre code :</label>
      <textarea 
        name="codeSnippet" 
        id="codeSnippet" 
        class="w-full h-40 p-3 border rounded-lg focus:ring focus:ring-blue-300" 
        placeholder="Écrivez votre code ici..."
      ></textarea>
      <button 
        type="submit" 
        class="mt-4 w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg"
      >
        Générer votre Quiz
      </button>
    </form>

    <!-- Affichage des résultats -->
    <div class="mt-6 w-full max-w-lg bg-white p-4 rounded-lg shadow-md">
      {errorMessage && <p class="text-red-500 font-semibold">{errorMessage}</p>}
      {quizData && (
        <div>
          <h2 class="text-xl font-semibold mt-4">Quiz généré :</h2>
          <pre class="bg-gray-200 p-4 rounded-lg mt-2 text-left text-sm">{JSON.stringify(quizData, null, 2)}</pre>
        </div>
      )}
    </div>

  </div>
</Layout>
