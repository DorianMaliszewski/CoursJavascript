---
import Layout from "layouts/Layout.astro";
import type { Answers, APIResponse } from "types";
import { Code } from "astro:components";
import { AnswerForm } from "components/AnswerForm.tsx";
import { getQuiz } from "utils/getQuiz";
import { getCookieName } from "utils/getCookieName";
import { getRandomQuestion } from "utils/getRandomQuestion";
import { getRelativeLocaleUrl } from "astro:i18n";
import { PATHS } from "paths";
import { isNullOrUndefined } from "utils/isNullOrUndefined";
import crypto from "crypto";


export const prerender = false;

const ONE_DAY_IN_SECONDS = 60 * 60 * 24;
const { quizId, questionNumber: questionNumberString } = Astro.params;

if (!quizId || !questionNumberString) {
  return Astro.redirect("/404");
}

const cookieKey = getCookieName(quizId);
const questionIndex = Number.parseInt(questionNumberString);

const quizData = await getQuiz(quizId, Astro.cookies);
if (!quizData) {
  return Astro.redirect("/404");
}

if (quizData.mode === "close") {
  return Astro.redirect(
    getRelativeLocaleUrl(Astro.currentLocale, PATHS.quiz(quizId, "closed")),
  );
}

const totalQuestions = quizData.questionsPerTest;
const currentQuestion = quizData.questions[questionIndex];
if (!questionNumberString || Number.isNaN(questionIndex)) {
  return Astro.redirect("/404");
}

let answers: Answers = {};
if (Astro.cookies.has(cookieKey)) {
  const answersCookie = Astro.cookies.get(cookieKey);
  answers = answersCookie?.json();
}
const [_, nextQuestionIndex] = getRandomQuestion(
  quizData.questions,
  Object.keys(answers).map(Number),
);

const meta = {
  title: `MMI Quiz - ${quizData.name}`,
  description: `Testez vos comp√©tences avec ce questionnaire`,
};

// When an answer is submitted
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const answerIndex = data.get("answerIndex");
    if (typeof answerIndex !== "string") throw new Error("No answer provided");

    if (
      answers[questionIndex] === null ||
      answers[questionIndex] === undefined
    ) {
      answers[questionIndex] = parseInt(answerIndex);
      Astro.cookies.set(cookieKey, JSON.stringify(answers), {
        maxAge: ONE_DAY_IN_SECONDS,
        path: "/",
        sameSite: true,
        httpOnly: true,
      });
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
// For malicious student that want the same question
// We already set the cookie in case they change the url for another question it will be count as a false response
if (answers[questionIndex] === null || answers[questionIndex] === undefined) {
  answers[questionIndex] = null;
  Astro.cookies.set(cookieKey, JSON.stringify(answers), {
    maxAge: ONE_DAY_IN_SECONDS,
    path: "/",
    sameSite: true,
    httpOnly: true,
  });
}

const totalAnswers = Object.keys(answers).length;

const timeByQuestionInSeconds = quizData.mode === 'exam' ? quizData.timeByQuestionInSeconds : 0;
---

<Layout title={meta.title}>
{isNullOrUndefined(answers[questionIndex]) && timeByQuestionInSeconds > 0 && (
  <div
      class="fixed top-0 left-0 right-0 h-2 bg-primary w-full animate-timer"
      id="timer"
      style=`animation-duration: ${timeByQuestionInSeconds}s; animation-fill-mode: forwards;`
    >
    </div>
    <script is:inline>
      document.getElementById("timer").addEventListener("animationend", () => {
        document.getElementById("answerForm").submit();
      });
  </script>
  )}
  <div class="flex flex-col gap-8">
    <h1>{quizData.name}</h1>
    <div class="flex flex-col gap-4">
      <div class="text-xl font-semibold">
        Question {totalAnswers} sur {totalQuestions}
      </div>
      <progress
        class="progress progress-primary w-full max-w-lg"
        value={totalAnswers}
        max={totalQuestions}></progress>
    </div>
    <Code code={currentQuestion.question} lang='markdown' />
    <AnswerForm
      hasMoreQuestions={totalAnswers < totalQuestions}
      answerIndex={answers[questionIndex]}
      quizId={quizId}
      answers={currentQuestion.answers}
      question={currentQuestion.question}
      correctAnswerIndex={currentQuestion.correctAnswerIndex}
      nextQuestionIndex={nextQuestionIndex}
      currentLocale={Astro.currentLocale}
    />
  </div>
</Layout>
